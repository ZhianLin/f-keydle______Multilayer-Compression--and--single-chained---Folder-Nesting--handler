@echo off
rem -----编码：ANSI-----
setlocal enabledelayedexpansion
title ｜子执行器｜


rem 仅处理文件夹不需要这些配置文件


rem 进入循环
goto folder_process






rem 一、【处理当前目录下所有的文件夹】
:folder_process

rem 把所有者改为所有管理员，为下面的授权铺路
rem 即使里面的项目带有“系统”、“隐藏”属性，且对everyone拒绝一切访问，经过实验，takeown也能起效。
takeown /f "*" /A > nul

rem 由于已给everyone授予目标文件夹（1个）完全控制权限并向下继承“:(CI)(OI)(F)”，此时权限允许进入并列出文件，这里只要重置即可。
rem 即使项目带有“系统”、“隐藏”属性，icacls也可以访问。
icacls "*" /reset /C > nul

rem 防止有隐藏或系统文件（夹）让批处理忽略
attrib -S -H "*" /S /D > nul

rem 统计每次处理文件夹的操作次数，到最后操作数会变成0。
set /a operate_times=0

rem 处理之前的视角下的第1级目录，之前母程序已经取得了完全的访问权限。
for /d %%j in ("*") do (
    
    rem 进入（处理之前的视角下的第2级目录）。
    rem 由于（处理之前的视角下的第1级目录）已给everyone授予完全控制权限并向下继承，此时权限允许进入并列出文件。
    cd "%%j"

    rem 把所有者改为所有管理员，为下面的授权铺路
    takeown /f "*" /A > nul

    rem 由于（处理之前的视角下的第1级目录）已给everyone授予完全控制权限并向下继承，这里只要重置即可。
    icacls "*" /reset /C > nul

    rem 防止有隐藏或系统文件（夹）让批处理忽略
    attrib -S -H "*" /S /D > nul

    rem 统计每个【子】文件夹中，文件夹的个数。
    set /a num_a=0
    for /d %%k in ("*") do (set /a num_a+=1)
    
    rem 统计每个【子】文件夹中，文件的个数。
    set /a num_b=0
    for %%k in ("*") do (set /a num_b+=1)

    rem 统计每个【子】文件夹中，压缩文件的个数。
    set /a num_c=0
    for %%k in ("*") do (
        set EXT=%%~xk

        rem 扩展名转换成小写
        for %%a in (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) do (
            set EXT=!EXT:%%a=%%a!
        )

        set /a f_stat=0
        rem ********压缩包扩展名列表********
        
        if "!EXT!"==".001" (
            set /a f_stat=1

        ) else if "!EXT!"==".zip" (
            set /a f_stat=1

        ) else if "!EXT!"==".7z" (
            set /a f_stat=1

        ) else if "!EXT!"==".rar" (
            set /a f_stat=1

        ) else if "!EXT!"==".tar" (
            set /a f_stat=1

        ) else if "!EXT!"==".gz" (
            set /a f_stat=1

         rem -----------后续添加-----------
         rem ) else if "!EXT!"==".[扩展名]" (
         rem    set /a f_stat=1
         rem 【建议留一个空行】
         rem -----------后续添加-----------
        
         rem ********压缩包扩展名列表结束线********

        ) else (
            set /a f_stat=0
        )

        if !f_stat! EQU 1 (set /a num_c+=1)
    )
    
    cd..

    set /a pass_card=0
    rem 有一个文件夹，没有文件（当然也没有压缩文件）
    if !num_a! EQU 1 (if !num_b! EQU 0 (set /a pass_card=1))
    rem 没有文件夹，有一个文件，且这个文件就是压缩文件（文件个数等于压缩文件个数）
    if !num_a! EQU 0 (if !num_b! EQU 1 (if !num_b! EQU !num_c! (set /a pass_card=1)))
    


    rem 判断是否只有一个文件夹或只有一个压缩文件，如是，移动到上一级，同时操作数加一。
    rem 空文件夹、含有多个项目的文件夹和含有单个非压缩文件的文件夹不处理
    if !pass_card! EQU 1 (

        set /a operate_times+=1

        rem 此时文件夹“J”注定在之后被删除，进行重命名可以一定程度上解决下一层即将释放的文件（夹）与“J”同名的问题。
        set new_f_name_outside=%%j_!time:~0,2!_!time:~3,2!_!time:~6,5!_!random!_!random!_!random!
        ren "%%j" "!new_f_name_outside!"

        cd "!new_f_name_outside!"

        rem 【或】移出单个文件夹
        for /d %%i in ("*") do (
        
            rem 移出前预测：如有冲突，名称里加上当前时间和3个随机数
            if exist "..\%%i" (

                set new_f_name_inside=%%i_【!time:~0,2!-!time:~3,2!-!time:~6,5!_!random!_!random!_!random!】
                ren "%%i" "!new_f_name_inside!"
                move /y "!new_f_name_inside!" "..\" > nul

             rem 移出前预测：无冲突，直接移出
            ) else (
                move /y "%%i" "..\" > nul
            )
        )

        rem 【或】移出单个文件
        for %%i in ("*") do (
            
            rem 移出前预测：如有冲突，名称里加上当前时间和3个随机数
            if exist "..\%%i" (
                
                rem 文件有扩展名和文件名，需要特殊对待。
                set new_f_name_inside=%%~ni_【!time:~0,2!-!time:~3,2!-!time:~6,5!_!random!_!random!_!random!】%%~xi
                ren "%%i" "!new_f_name_inside!"
                move /y "!new_f_name_inside!" "..\" > nul

             rem 移出前预测：无冲突，直接移出
            ) else (
                move /y "%%i" "..\" > nul
            )
        )

        cd..

        rem 删除已经被处理搬空的文件夹（处理之前的视角下的第1级目录）
        rd /s /q "!new_f_name_outside!"
    
    )
)

rem 操作数不为零，说明文件夹的处理没结束；为零的话，由于这里只处理文件夹，任务结束。
if !operate_times! GTR 0 (
    goto folder_process
) else (
    goto close_up
)




:close_up

rem 将bat和必要的文件复制继承到下一级文件夹中（排除空文件夹），挨个启动每个文件夹中的bat，继续下一代的尝试处理。
for /d %%j in ("*") do (
    cd "%%j"

    rem 统计每个文件夹里的项目总数（此时文件访问权限是没问题的）
    set /a num_c=0
    for /d %%k in ("*") do (set /a num_c+=1)
    for %%k in ("*") do (set /a num_c+=1)

    rem 如果不是空文件夹，就执行操作
    if !num_c! NEQ 0 (
        rem 先尝试硬链接（少占空间），如果失败，换拷贝。
        rem 复制“_child_excuter_2.bat”自身（仅处理文件夹，下一级肯定没有bat，因为不存在重试密码的操作）
        if not exist "%~nx0" (mklink /h "%~nx0" "..\%~nx0")
        if not exist "%~nx0" (copy /y "..\%~nx0" ".\" > nul)
        
        rem 启动刚刚复制过来的“子”执行器
        start "【指定的标题】" /min /wait "%~nx0"
    )

    cd..
)
rem 所有文件夹都处理完后，结束。
exit


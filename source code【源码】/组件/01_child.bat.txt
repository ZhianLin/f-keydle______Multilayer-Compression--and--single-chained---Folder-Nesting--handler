@echo off
rem -----编码：ANSI-----
setlocal enabledelayedexpansion
title ｜子执行器｜



rem 读取Bandizip的绝对路径(txt中已经加了引号)
for /f "delims=" %%t in (_bdzip_core_address_.txt) do (set release_core=%%t)
rem 读取任务栏刷新工具的绝对路径
for /f "delims=" %%t in (_taskbar_refresh_tool_.txt) do (set refresh_tool=%%t)
rem 读取【组件】文件夹的绝对路径，为start命令做准备
for /f "delims=" %%t in (_origin_path_.txt) do (set origin_path=%%t)

set target_path=%~dp0
rem “dp0”末尾自带“\”，下面这一步去掉它。
set target_path=!target_path:~0,-1!
rem 统一去掉两侧的双引号，方便下面确定盘符。
set origin_path=!origin_path:"=!
set target_drivename=%~d0
rem 去掉英文双引号干扰后，盘符就是第一第二个字符。
set origin_drivename=%origin_path:~0,2%

rem 进入循环
goto folder_process






rem 一、【处理当前目录下所有的文件夹】
:folder_process

rem 把所有者改为所有管理员，为下面的授权铺路
rem 即使里面的项目带有“系统”、“隐藏”属性，且对everyone拒绝一切访问，经过实验，takeown也能起效。
takeown /f "*" /A > nul

rem 由于已给everyone授予目标文件夹（1个）完全控制权限并向下继承“:(CI)(OI)(F)”，此时权限允许进入并列出文件，这里只要重置即可。
rem 即使项目带有“系统”、“隐藏”属性，icacls也可以访问。
icacls "*" /reset /C > nul

rem 防止有隐藏或系统文件（夹）让批处理忽略
attrib -S -H "*" /S /D > nul

rem 统计每次处理文件夹的操作次数，到最后操作数会变成0。
set /a operate_times=0
rem 处理之前的视角下的第1级目录，之前母程序已经取得了完全的访问权限。
for /d %%j in ("*") do (
    
    rem 进入（处理之前的视角下的第2级目录）。
    rem 由于（处理之前的视角下的第1级目录）已给everyone授予完全控制权限并向下继承，此时权限允许进入并列出文件。
    cd "%%j"

    rem 把所有者改为所有管理员，为下面的授权铺路
    takeown /f "*" /A > nul

    rem 由于（处理之前的视角下的第1级目录）已给everyone授予完全控制权限并向下继承，这里只要重置即可。
    icacls "*" /reset /C > nul

    rem 防止有隐藏或系统文件（夹）让批处理忽略
    attrib -S -H "*" /S /D > nul

    rem 统计每个【子】文件夹中，文件夹的个数。
    set /a num_a=0
    for /d %%k in ("*") do (set /a num_a+=1)
    
    rem 统计每个【子】文件夹中，文件的个数。
    set /a num_b=0
    for %%k in ("*") do (set /a num_b+=1)

    rem 统计每个【子】文件夹中，压缩文件的个数。
    set /a num_c=0
    for %%k in ("*") do (
        set EXT=%%~xk

        rem 扩展名转换成小写
        for %%a in (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) do (
            set EXT=!EXT:%%a=%%a!
        )

        set /a f_stat=0
        rem ********压缩包扩展名列表********
        
        if "!EXT!"==".001" (
            set /a f_stat=1

        ) else if "!EXT!"==".zip" (
            set /a f_stat=1

        ) else if "!EXT!"==".7z" (
            set /a f_stat=1

        ) else if "!EXT!"==".rar" (
            set /a f_stat=1

        ) else if "!EXT!"==".tar" (
            set /a f_stat=1

        ) else if "!EXT!"==".gz" (
            set /a f_stat=1

         rem -----------后续添加-----------
         rem ) else if "!EXT!"==".[扩展名]" (
         rem    set /a f_stat=1
         rem 【建议留一个空行】
         rem -----------后续添加-----------
        
         rem ********压缩包扩展名列表结束线********

        ) else (
            set /a f_stat=0
        )

        if !f_stat! EQU 1 (set /a num_c+=1)
    )
    
    cd..

    set /a pass_card=0
    rem 有一个文件夹，没有文件（当然也没有压缩文件）
    if !num_a! EQU 1 (if !num_b! EQU 0 (set /a pass_card=1))
    rem 没有文件夹，有一个文件，且这个文件就是压缩文件（文件个数等于压缩文件个数）
    if !num_a! EQU 0 (if !num_b! EQU 1 (if !num_b! EQU !num_c! (set /a pass_card=1)))
    

    rem 判断是否只有一个文件夹或只有一个压缩文件，如是，移动到上一级，同时操作数加一。
    rem 空文件夹、含有多个项目的文件夹和含有单个非压缩文件的文件夹不处理
    if !pass_card! EQU 1 (

        set /a operate_times+=1

        rem 此时文件夹“J”注定在之后被删除，进行重命名可以一定程度上解决下一层即将释放的文件（夹）与“J”同名的问题。
        set new_f_name_outside=%%j_!time:~0,2!_!time:~3,2!_!time:~6,5!_!random!_!random!_!random!
        ren "%%j" "!new_f_name_outside!"

        cd "!new_f_name_outside!"

        rem 【或】移出单个文件夹
        for /d %%i in ("*") do (
        
            rem 移出前预测：如有冲突，名称里加上当前时间和3个随机数
            if exist "..\%%i" (

                set new_f_name_inside=%%i_【!time:~0,2!-!time:~3,2!-!time:~6,5!_!random!_!random!_!random!】
                ren "%%i" "!new_f_name_inside!"
                move /y "!new_f_name_inside!" "..\" > nul

             rem 移出前预测：无冲突，直接移出
            ) else (
                move /y "%%i" "..\" > nul
            )
        )

        rem 【或】移出单个文件
        for %%i in ("*") do (
            
            rem 移出前预测：如有冲突，名称里加上当前时间和3个随机数
            if exist "..\%%i" (
                
                rem 文件有扩展名和文件名，需要特殊对待。
                set new_f_name_inside=%%~ni_【!time:~0,2!-!time:~3,2!-!time:~6,5!_!random!_!random!_!random!】%%~xi
                ren "%%i" "!new_f_name_inside!"
                move /y "!new_f_name_inside!" "..\" > nul

             rem 移出前预测：无冲突，直接移出
            ) else (
                move /y "%%i" "..\" > nul
            )
        )

        cd..

        rem 删除已经被处理搬空的文件夹（处理之前的视角下的第1级目录）
        rd /s /q "!new_f_name_outside!"
    
    )
)

rem 操作数不为零，说明文件夹的处理没结束；为零的话，还得看看有没有压缩文件需要解压缩。
if !operate_times! GTR 0 (
    goto folder_process
) else (
    rem 统计【目标】文件夹下压缩文件个数（刚才只处理了文件夹（里面的文件或文件夹），没有动这里的文件）
    set /a num_c=0
    for %%k in ("*") do (
        set EXT=%%~xk

        rem 扩展名转换成小写
        for %%a in (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) do (
            set EXT=!EXT:%%a=%%a!
        )

        set /a f_stat=0
        rem ********压缩包扩展名列表********
        
        if "!EXT!"==".001" (
            set /a f_stat=1

        ) else if "!EXT!"==".zip" (
            set /a f_stat=1

        ) else if "!EXT!"==".7z" (
            set /a f_stat=1

        ) else if "!EXT!"==".rar" (
            set /a f_stat=1

        ) else if "!EXT!"==".tar" (
            set /a f_stat=1

        ) else if "!EXT!"==".gz" (
            set /a f_stat=1

         rem -----------后续添加-----------
         rem ) else if "!EXT!"==".[扩展名]" (
         rem    set /a f_stat=1
         rem 【建议留一个空行】
         rem -----------后续添加-----------
        
         rem ********压缩包扩展名列表结束线********

        ) else (
            set /a f_stat=0
        )

        if !f_stat! EQU 1 (set /a num_c+=1)
    )

    rem 如果个数大于0，意味着有压缩文件。
    if !num_c! GTR 0 (
        goto compressed_files_process
    ) else (
        rem 没有压缩文件，上一步也确认过没有可以处理的文件夹了，就可以收尾了。
        goto close_up
    )
)





rem 二、【处理压缩文件】
:compressed_files_process

rem 这个程序在Bandizip解压时，如果出现错误，自动关闭解压窗口，
rem 并把错误消息“release_error_”写入_checker_record_.txt，方便批处理读取进行判断每次解压是否失败。
start "【解压成功失败检测器】" "_解压成功失败检测器_.exe"

rem 等待【_解压成功失败检测器_.exe】写入当前路径到txt
:hold
if not exist "_current_path_.txt" (goto hold)

rem 将txt移动到detector目录下等待调用。
if exist "%origin_path%\detector\_current_path_.txt" (del /f /q "%origin_path%\detector\_current_path_.txt")
move /y "_current_path_.txt" "%origin_path%\detector\" > nul

rem 创建记录文件
if not exist "_checker_record_.txt" (cd.>"_checker_record_.txt")
if not exist "_folder_names_record_.txt" (cd.>"_folder_names_record_.txt")

for %%j in ("*") do (
    set /a f_stat=0
    set name=%%~nj
    set EXT=%%~xj

    rem 扩展名转换成小写
    for %%a in (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z) do (
        set EXT=!EXT:%%a=%%a!
    )

    rem ********压缩包扩展名列表********

    if "!EXT!"==".001" (
        set /a f_stat=1

    ) else if "!EXT!"==".zip" (
        set /a f_stat=1

    ) else if "!EXT!"==".7z" (
        set /a f_stat=1

    ) else if "!EXT!"==".rar" (
        set /a f_stat=1

    ) else if "!EXT!"==".tar" (
        set /a f_stat=1

    ) else if "!EXT!"==".gz" (
        set /a f_stat=1

     rem -----------后续添加-----------
     rem ) else if "!EXT!"==".[扩展名]" (
     rem    set /a f_stat=1
     rem 【建议留一个空行】
     rem -----------后续添加-----------

     rem ********压缩包扩展名列表结束线********
    
    ) else (
        set /a f_stat=0
    )


    rem 如是压缩文件（扩展名判定），开始操作。
    if !f_stat! EQU 1 (
        rem 挨个尝试密码
        for /f "delims=" %%t in (_password_.txt) do (
            rem 如果这个压缩包还在的话，尝试解压。
            rem 密码正确，解压成功后会被删除，就可以通过判断这个压缩文件是否存在，
            rem 来确定是否还要试下一个密码。
            if exist "%%j" (
                set readed_password=%%t

                cd\
                %origin_drivename%
                cd "%origin_path%\detector"


                rem 解压前记录下当前目录下所有的文件夹名称。
                "detector.exe" r ".\_current_path_.txt" "_folder_names_record_.txt"

                cd\
                %target_drivename%
                cd "%target_path%"

                rem 尝试解压
                %release_core% x -aou -p:"!readed_password!" -target:auto "%%j"


                rem 查找解压检查器留下的记录中有无失败标记
                find "release_error_" "_checker_record_.txt">nul
                set /a num_c=!errorlevel!
                rem 上面两行要紧挨在一起，用一个变量承接errorlevel（errorlevel每一个命令变化一次），
                rem 这样下面如果有需要的话就可以添加注释或者新的命令了。

                rem 要拿到的数据已经到手，及时清空记录
                cd.>"_checker_record_.txt"

                rem 找到记录中的失败标记就说明失败了（errorlevel==0）
                if !num_c! EQU 0 (
                    rem 解压失败，即使解压出文件夹，也没有意义，所以需要删除。
                    rem 找出新增的文件夹，并删除
                    cd\
                    %origin_drivename%
                    cd "%origin_path%\detector"
                
                    rem 根据刚才的记录，删除可能新增的文件夹（如果有，就有且仅有一个）。
                    "detector.exe" d ".\_current_path_.txt" "_folder_names_record_.txt"

                    cd\
                    %target_drivename%
                    cd "%target_path%"

                ) else (
                    rem 解压成功，删除文件释放空间。
                    del /f /q "%%j"
                    rem 分卷压缩要删更多文件。
                    if "!EXT!"==".001" (del /f /q "!name!.*")
                )

                rem （可能）detector.exe已运行过，及时清空记录
                cd.>"_folder_names_record_.txt"
            )
        )

        rem 如果此时j还存在，说明所有密码都试过来了，依然没有解压成功。
        if exist "%%j" (
            rem 给失败的文件打上标签（改变扩展名），这样下次循环到解压文件这一步就不会计算在内，造成死循环。
            ren "%%j" "%%j.解压失败"
            rem 由于程序只针对“.001”进行处理，所以不需要给其余分卷重命名。
        )
    )
)
rem 正常结束（这个exe是一直循环下去的，需要手动结束）
taskkill /im "_解压成功失败检测器_.exe">nul 2>nul
rem 如果没有结束，强制结束；强制结束时会残留任务栏图标，为了防止图标堆积，启动任务栏刷新（这个exe执行完后会自动退出，批处理不会卡住）。
taskkill /f /im "_解压成功失败检测器_.exe">nul 2>nul
if !errorlevel! EQU 0 (
    start "【指定的标题】" !refresh_tool!
)

rem 如果出现多层压缩，还得进行文件夹处理。最后会从“文件夹处理”判断并跳出循环。
goto folder_process





:close_up
rem 到这里一轮处理已经完成并走出循环了，可以放心地将原来打上“解压失败”的文件改回来，方便下一次尝试。
for %%j in ("*.解压失败") do (
    set replace_name=%%j
    set replace_name=!replace_name:.解压失败=!
    ren "%%j" "!replace_name!"
)

rem 将bat和必要的文件复制继承到下一级文件夹中（排除空文件夹），挨个启动每个文件夹中的bat，继续下一代的尝试处理。
for /d %%j in ("*") do (
    cd "%%j"

    rem 统计每个文件夹里的项目总数（此时文件访问权限是没问题的）
    set /a num_c=0
    for /d %%k in ("*") do (set /a num_c+=1)
    for %%k in ("*") do (set /a num_c+=1)

    rem 如果不是空文件夹，就执行操作
    if !num_c! NEQ 0 (
        rem 复制各类信息配置和可执行文件
        rem bandizip、任务栏刷新工具、【组件】文件夹的绝对路径固定，如果已经存在（主程序分配下一个密码的时候），就不需要覆盖。
        rem 先尝试硬链接（少占空间），如果失败，换拷贝。
        if not exist "_bdzip_core_address_.txt" (mklink /h "_bdzip_core_address_.txt" "..\_bdzip_core_address_.txt" > nul)
        if not exist "_bdzip_core_address_.txt" (copy /y "..\_bdzip_core_address_.txt" ".\" > nul)

        if not exist "_taskbar_refresh_tool_.txt" (mklink /h "_taskbar_refresh_tool_.txt" "..\_taskbar_refresh_tool_.txt" > nul)
        if not exist "_taskbar_refresh_tool_.txt" (copy /y "..\_taskbar_refresh_tool_.txt" ".\" > nul)

        if not exist "_origin_path_.txt" (mklink /h "_origin_path_.txt" "..\_origin_path_.txt" > nul)
        if not exist "_origin_path_.txt" (copy /y "..\_origin_path_.txt" ".\")

        
        rem 如果存在旧密码，需要覆盖。先删除后拷贝，直接拷贝会拒绝访问。
        if exist "_password_.txt" (del /f /q "_password_.txt" > nul)
        mklink /h "_password_.txt" "..\_password_.txt" > nul
        if not exist "_password_.txt" (copy /y "..\_password_.txt" ".\" > nul)

        rem 如果存在exe和bat，也不需要覆盖
        if not exist "_解压成功失败检测器_.exe" (mklink /h "_解压成功失败检测器_.exe" "..\_解压成功失败检测器_.exe" > nul)
        if not exist "_解压成功失败检测器_.exe" (copy /y "..\_解压成功失败检测器_.exe" ".\" > nul)

        rem 指“_child_excuter_1.bat”自身
        if not exist "%~nx0" (mklink /h "%~nx0" "..\%~nx0" > nul)
        if not exist "%~nx0" (copy /y "..\%~nx0" ".\" > nul)


        rem 记录文件"_checker_record_.txt"、"_folder_names_record_.txt"、"_current_path_.txt"可自动生成，无需复制。


        rem 启动刚刚复制过来的“子”执行器
        start "【指定的标题】" /min /wait "%~nx0"
    )

    cd..
)
rem 所有文件夹都处理完后，结束。
exit

